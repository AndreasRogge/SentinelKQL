let starttime = 30d;
let endtime = 1d;
let timeframe = 1d;
let TotalEventsThreshold = 5;
let TimeSeriesData = IdentityLogonEvents
| where TimeGenerated between (startofday(ago(starttime))..startofday(now())) 
| where LogonType == "Failed logon" and FailureReason == "WrongPassword"
| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by AccountName;
TimeSeriesData 
| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 0, -1, 'linefit') 
| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) 
| where TimeGenerated >= startofday(ago(endtime)) 
| where anomalies > 0 
| project AccountName, TimeGenerated, Total, baseline, anomalies, score 
| where Total > TotalEventsThreshold and baseline > 0 
| join (IdentityLogonEvents
| where TimeGenerated between (startofday(ago(starttime))..startofday(now())) 
| where LogonType == "Failed logon" and FailureReason == "WrongPassword"
| summarize count(), make_set(DeviceName,100) by bin(TimeGenerated, timeframe), AccountName
) on TimeGenerated, AccountName
| project-away AccountName1, count_


| summarize Failures=count(), 
    NumAccounts=count_distinct(AccountName), 
  Accounts=make_set(AccountName) by DeviceName

IdentityLogonEvents
| where TimeGenerated between (startofday(ago(starttime))..startofday(now())) 
| where Application == @"Active Directory" // AD only
| where AccountDomain == @"msdemo.org" // if needed to filter by domain
| where ActionType == @"LogonFailed"
| where FailureReason == @"WrongPassword" or FailureReason == @"AccountLocked" //badpasswordcount attribute
| summarize FailureReason = count() by DeviceName, IPAddress, AccountUpn
| where FailureReason > 15 //depending on the Account Lockout threshold


GCPAuditLogs 
| where TimeGenerated between (startofday(ago(starttime))..startofday(now())) 
| where MethodName endswith "delete" 
| extend IPCustomEntity = tostring(parse_json(todynamic(RequestMetadata))['callerIp'])
| where IPCustomEntity != "private"
| where not(ipv4_is_private(IPCustomEntity))
| extend SrcUsername = tostring(parse_json(todynamic(AuthenticationInfo))['principalEmail'])
| extend SrcUserAgent = parse_json(todynamic(RequestMetadata))['callerSuppliedUserAgent']
| project TimeGenerated, SrcUsername
| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by SrcUsername;
TimeSeriesData 
| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 3, -1, 'linefit') 
| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) 
| where TimeGenerated >= startofday(ago(endtime)) 
| where anomalies > 0 
| project SrcUsername, TimeGenerated, Total, baseline, anomalies, score 
| where Total > TotalEventsThreshold and baseline > 0 
| join (GCPAuditLogs 
| where TimeGenerated > startofday(ago(endtime)) 
| where MethodName endswith "delete" 
| extend IPCustomEntity = tostring(parse_json(todynamic(RequestMetadata))['callerIp'])
| where IsPrivate = IPCustomEntity != "private"
| where not(ipv4_is_private(IPCustomEntity))
| extend SrcUsername = tostring(parse_json(todynamic(AuthenticationInfo))['principalEmail'])
| extend SrcUserAgent = parse_json(todynamic(RequestMetadata))['callerSuppliedUserAgent']
| summarize count(), make_set(MethodName,100), make_set(GCPResourceName,100), make_set(IPCustomEntity,100) by bin(TimeGenerated, timeframe), SrcUsername
) on TimeGenerated, SrcUsername
| project-away SrcUsername1, count_